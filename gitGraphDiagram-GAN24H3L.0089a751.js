function t(t,e,r,a){Object.defineProperty(t,e,{get:r,set:a,enumerable:!0,configurable:!0})}var e=globalThis.parcelRequire94c2,r=e.register;r("i5kjY",function(r,a){t(r.exports,"diagram",()=>tf);var o=e("inIYd"),i=e("eIvOz"),n=e("9nJgw");e("2P6uP"),e("58fUp"),e("6JCZZ");var c=e("fo0kP");e("1OUid");var s=e("7hgA6");e("5aabO"),e("bqRip"),e("bYG2S"),e("76RTQ"),e("f34bP"),e("2266r");var m=e("7xxrv"),l={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},d=s.defaultConfig_default.gitGraph,h=/* @__PURE__ */(0,m.__name)(()=>(0,c.cleanAndMerge)({...d,...(0,s.getConfig)().gitGraph}),"getConfig"),$=new o.ImperativeState(()=>{let t=h(),e=t.mainBranchName,r=t.mainBranchOrder;return{mainBranchName:e,commits:/* @__PURE__ */new Map,head:null,branchConfig:/* @__PURE__ */new Map([[e,{name:e,order:r}]]),branches:/* @__PURE__ */new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function g(){return(0,c.random)({length:7})}function y(t,e){let r=/* @__PURE__ */Object.create(null);return t.reduce((t,a)=>{let o=e(a);return r[o]||(r[o]=!0,t.push(a)),t},[])}(0,m.__name)(g,"getID"),(0,m.__name)(y,"uniqBy");var p=/* @__PURE__ */(0,m.__name)(function(t){$.records.direction=t},"setDirection"),f=/* @__PURE__ */(0,m.__name)(function(t){(0,s.log).debug("options str",t),t=(t=t?.trim())||"{}";try{$.records.options=JSON.parse(t)}catch(t){(0,s.log).error("error while parsing gitGraph options",t.message)}},"setOptions"),x=/* @__PURE__ */(0,m.__name)(function(){return $.records.options},"getOptions"),u=/* @__PURE__ */(0,m.__name)(function(t){let e=t.msg,r=t.id,a=t.type,o=t.tags;(0,s.log).info("commit",e,r,a,o),(0,s.log).debug("Entering commit:",e,r,a,o);let i=h();r=(0,s.common_default).sanitizeText(r,i),e=(0,s.common_default).sanitizeText(e,i),o=o?.map(t=>s.common_default.sanitizeText(t,i));let n={id:r||$.records.seq+"-"+g(),message:e,seq:$.records.seq++,type:a??l.NORMAL,tags:o??[],parents:null==$.records.head?[]:[$.records.head.id],branch:$.records.currBranch};$.records.head=n,(0,s.log).info("main branch",i.mainBranchName),$.records.commits.set(n.id,n),$.records.branches.set($.records.currBranch,n.id),(0,s.log).debug("in pushCommit "+n.id)},"commit"),b=/* @__PURE__ */(0,m.__name)(function(t){let e=t.name,r=t.order;if(e=(0,s.common_default).sanitizeText(e,h()),$.records.branches.has(e))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);$.records.branches.set(e,null!=$.records.head?$.records.head.id:null),$.records.branchConfig.set(e,{name:e,order:r}),B(e),(0,s.log).debug("in createBranch")},"branch"),_=/* @__PURE__ */(0,m.__name)(t=>{let e=t.branch,r=t.id,a=t.type,o=t.tags,i=h();e=(0,s.common_default).sanitizeText(e,i),r&&(r=(0,s.common_default).sanitizeText(r,i));let n=$.records.branches.get($.records.currBranch),c=$.records.branches.get(e),m=n?$.records.commits.get(n):void 0,d=c?$.records.commits.get(c):void 0;if(m&&d&&m.branch===e)throw Error(`Cannot merge branch '${e}' into itself.`);if($.records.currBranch===e){let t=Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(void 0===m||!m){let t=Error(`Incorrect usage of "merge". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},t}if(!$.records.branches.has(e)){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},t}if(void 0===d||!d){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},t}if(m===d){let t=Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(r&&$.records.commits.has(r)){let t=Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom Id");throw t.hash={text:`merge ${e} ${r} ${a} ${o?.join(" ")}`,token:`merge ${e} ${r} ${a} ${o?.join(" ")}`,expected:[`merge ${e} ${r}_UNIQUE ${a} ${o?.join(" ")}`]},t}let y={id:r||`${$.records.seq}-${g()}`,message:`merged branch ${e} into ${$.records.currBranch}`,seq:$.records.seq++,parents:null==$.records.head?[]:[$.records.head.id,c||""],branch:$.records.currBranch,type:l.MERGE,customType:a,customId:!!r,tags:o??[]};$.records.head=y,$.records.commits.set(y.id,y),$.records.branches.set($.records.currBranch,y.id),(0,s.log).debug($.records.branches),(0,s.log).debug("in mergeBranch")},"merge"),w=/* @__PURE__ */(0,m.__name)(function(t){let e=t.id,r=t.targetId,a=t.tags,o=t.parent;(0,s.log).debug("Entering cherryPick:",e,r,a);let i=h();if(e=(0,s.common_default).sanitizeText(e,i),r=(0,s.common_default).sanitizeText(r,i),a=a?.map(t=>s.common_default.sanitizeText(t,i)),o=(0,s.common_default).sanitizeText(o,i),!e||!$.records.commits.has(e)){let t=Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let n=$.records.commits.get(e);if(void 0===n||!n)throw Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(o&&!(Array.isArray(n.parents)&&n.parents.includes(o)))throw Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let c=n.branch;if(n.type===l.MERGE&&!o)throw Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!r||!$.records.commits.has(r)){if(c===$.records.currBranch){let t=Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let t=$.records.branches.get($.records.currBranch);if(void 0===t||!t){let t=Error(`Incorrect usage of "cherry-pick". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let i=$.records.commits.get(t);if(void 0===i||!i){let t=Error(`Incorrect usage of "cherry-pick". Current branch (${$.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let m={id:$.records.seq+"-"+g(),message:`cherry-picked ${n?.message} into ${$.records.currBranch}`,seq:$.records.seq++,parents:null==$.records.head?[]:[$.records.head.id,n.id],branch:$.records.currBranch,type:l.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${n.id}${n.type===l.MERGE?`|parent:${o}`:""}`]};$.records.head=m,$.records.commits.set(m.id,m),$.records.branches.set($.records.currBranch,m.id),(0,s.log).debug($.records.branches),(0,s.log).debug("in cherryPick")}},"cherryPick"),B=/* @__PURE__ */(0,m.__name)(function(t){if(t=(0,s.common_default).sanitizeText(t,h()),$.records.branches.has(t)){$.records.currBranch=t;let e=$.records.branches.get($.records.currBranch);void 0!==e&&e?$.records.head=$.records.commits.get(e)??null:$.records.head=null}else{let e=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},e}},"checkout");function E(t,e,r){let a=t.indexOf(e);-1===a?t.push(r):t.splice(a,1,r)}function C(t){let e=t.reduce((t,e)=>t.seq>e.seq?t:e,t[0]),r="";t.forEach(function(t){t===e?r+="	*":r+="	|"});let a=[r,e.id,e.seq];for(let t in $.records.branches)$.records.branches.get(t)===e.id&&a.push(t);if((0,s.log).debug(a.join(" ")),e.parents&&2==e.parents.length&&e.parents[0]&&e.parents[1]){let r=$.records.commits.get(e.parents[0]);E(t,e,r),e.parents[1]&&t.push($.records.commits.get(e.parents[1]))}else if(0==e.parents.length)return;else if(e.parents[0]){let r=$.records.commits.get(e.parents[0]);E(t,e,r)}C(t=y(t,t=>t.id))}(0,m.__name)(E,"upsert"),(0,m.__name)(C,"prettyPrintCommitHistory");var T=/* @__PURE__ */(0,m.__name)(function(){(0,s.log).debug($.records.commits),C([P()[0]])},"prettyPrint"),k=/* @__PURE__ */(0,m.__name)(function(){$.reset(),(0,s.clear)()},"clear"),L=/* @__PURE__ */(0,m.__name)(function(){return[...$.records.branchConfig.values()].map((t,e)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${e}`)}).sort((t,e)=>(t.order??0)-(e.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),v=/* @__PURE__ */(0,m.__name)(function(){return $.records.branches},"getBranches"),M=/* @__PURE__ */(0,m.__name)(function(){return $.records.commits},"getCommits"),P=/* @__PURE__ */(0,m.__name)(function(){let t=[...$.records.commits.values()];return t.forEach(function(t){(0,s.log).debug(t.id)}),t.sort((t,e)=>t.seq-e.seq),t},"getCommitsArray"),R={commitType:l,getConfig:h,setDirection:p,setOptions:f,getOptions:x,commit:u,branch:b,merge:_,cherryPick:w,checkout:B,prettyPrint:T,clear:k,getBranchesAsObjArray:L,getBranches:v,getCommits:M,getCommitsArray:P,getCurrentBranch:/* @__PURE__ */(0,m.__name)(function(){return $.records.currBranch},"getCurrentBranch"),getDirection:/* @__PURE__ */(0,m.__name)(function(){return $.records.direction},"getDirection"),getHead:/* @__PURE__ */(0,m.__name)(function(){return $.records.head},"getHead"),setAccTitle:s.setAccTitle,getAccTitle:s.getAccTitle,getAccDescription:s.getAccDescription,setAccDescription:s.setAccDescription,setDiagramTitle:s.setDiagramTitle,getDiagramTitle:s.getDiagramTitle},A=/* @__PURE__ */(0,m.__name)((t,e)=>{for(let r of((0,i.populateCommonDb)(t,e),t.dir&&e.setDirection(t.dir),t.statements))I(r,e)},"populate"),I=/* @__PURE__ */(0,m.__name)((t,e)=>{let r={Commit:/* @__PURE__ */(0,m.__name)(t=>e.commit(G(t)),"Commit"),Branch:/* @__PURE__ */(0,m.__name)(t=>e.branch(O(t)),"Branch"),Merge:/* @__PURE__ */(0,m.__name)(t=>e.merge(q(t)),"Merge"),Checkout:/* @__PURE__ */(0,m.__name)(t=>e.checkout(D(t)),"Checkout"),CherryPicking:/* @__PURE__ */(0,m.__name)(t=>e.cherryPick(z(t)),"CherryPicking")}[t.$type];r?r(t):(0,s.log).error(`Unknown statement type: ${t.$type}`)},"parseStatement"),G=/* @__PURE__ */(0,m.__name)(t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?l[t.type]:l.NORMAL,tags:t.tags??void 0}),"parseCommit"),O=/* @__PURE__ */(0,m.__name)(t=>({name:t.name,order:t.order??0}),"parseBranch"),q=/* @__PURE__ */(0,m.__name)(t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?l[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),D=/* @__PURE__ */(0,m.__name)(t=>t.branch,"parseCheckout"),z=/* @__PURE__ */(0,m.__name)(t=>({id:t.id,targetId:"",tags:t.tags?.length===0?void 0:t.tags,parent:t.parent}),"parseCherryPicking"),H={parse:/* @__PURE__ */(0,m.__name)(async t=>{let e=await (0,n.parse)("gitGraph",t);(0,s.log).debug(e),A(e,R)},"parse")},S=(0,s.getConfig2)(),N=S?.gitGraph,j=/* @__PURE__ */new Map,W=/* @__PURE__ */new Map,Y=/* @__PURE__ */new Map,F=[],K=0,U="LR",V=/* @__PURE__ */(0,m.__name)(()=>{j.clear(),W.clear(),Y.clear(),K=0,F=[],U="LR"},"clear"),J=/* @__PURE__ */(0,m.__name)(t=>{let e=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(t=>{let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=t.trim(),e.appendChild(r)}),e},"drawText"),Q=/* @__PURE__ */(0,m.__name)(t=>{let e,r,a;return"BT"===U?(r=/* @__PURE__ */(0,m.__name)((t,e)=>t<=e,"comparisonFunc"),a=1/0):(r=/* @__PURE__ */(0,m.__name)((t,e)=>t>=e,"comparisonFunc"),a=0),t.forEach(t=>{let o="TB"===U||"BT"==U?W.get(t)?.y:W.get(t)?.x;void 0!==o&&r(o,a)&&(e=t,a=o)}),e},"findClosestParent"),Z=/* @__PURE__ */(0,m.__name)(t=>{let e="",r=1/0;return t.forEach(t=>{let a=W.get(t).y;a<=r&&(e=t,r=a)}),e||void 0},"findClosestParentBT"),X=/* @__PURE__ */(0,m.__name)((t,e,r)=>{let a=r,o=r,i=[];t.forEach(t=>{let r=e.get(t);if(!r)throw Error(`Commit not found for key ${t}`);r.parents.length?o=Math.max(a=te(r),o):i.push(r),tr(r,a)}),a=o,i.forEach(t=>{ta(t,a,r)}),t.forEach(t=>{let r=e.get(t);if(r?.parents.length){let t=Z(r.parents);(a=W.get(t).y-40)<=o&&(o=a);let e=j.get(r.branch).pos,i=a-10;W.set(r.id,{x:e,y:i})}})},"setParallelBTPos"),tt=/* @__PURE__ */(0,m.__name)(t=>{let e=Q(t.parents.filter(t=>null!==t));if(!e)throw Error(`Closest parent not found for commit ${t.id}`);let r=W.get(e)?.y;if(void 0===r)throw Error(`Closest parent position not found for commit ${t.id}`);return r},"findClosestParentPos"),te=/* @__PURE__ */(0,m.__name)(t=>tt(t)+40,"calculateCommitPosition"),tr=/* @__PURE__ */(0,m.__name)((t,e)=>{let r=j.get(t.branch);if(!r)throw Error(`Branch not found for commit ${t.id}`);let a=r.pos,o=e+10;return W.set(t.id,{x:a,y:o}),{x:a,y:o}},"setCommitPosition"),ta=/* @__PURE__ */(0,m.__name)((t,e,r)=>{let a=j.get(t.branch);if(!a)throw Error(`Branch not found for commit ${t.id}`);let o=a.pos;W.set(t.id,{x:o,y:e+r})},"setRootPosition"),to=/* @__PURE__ */(0,m.__name)((t,e,r,a,o,i)=>{if(i===l.HIGHLIGHT)t.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${o%8} ${a}-outer`),t.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${o%8} ${a}-inner`);else if(i===l.CHERRY_PICK)t.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`);else{let n=t.append("circle");if(n.attr("cx",r.x),n.attr("cy",r.y),n.attr("r",e.type===l.MERGE?9:10),n.attr("class",`commit ${e.id} commit${o%8}`),i===l.MERGE){let i=t.append("circle");i.attr("cx",r.x),i.attr("cy",r.y),i.attr("r",6),i.attr("class",`commit ${a} ${e.id} commit${o%8}`)}i===l.REVERSE&&t.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${a} ${e.id} commit${o%8}`)}},"drawCommitBullet"),ti=/* @__PURE__ */(0,m.__name)((t,e,r,a)=>{if(e.type!==l.CHERRY_PICK&&(e.customId&&e.type===l.MERGE||e.type!==l.MERGE)&&N?.showCommitLabel){let o=t.append("g"),i=o.insert("rect").attr("class","commit-label-bkg"),n=o.append("text").attr("x",a).attr("y",r.y+25).attr("class","commit-label").text(e.id),c=n.node()?.getBBox();if(c&&(i.attr("x",r.posWithOffset-c.width/2-2).attr("y",r.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===U||"BT"===U?(i.attr("x",r.x-(c.width+16+5)).attr("y",r.y-12),n.attr("x",r.x-(c.width+16)).attr("y",r.y+c.height-12)):n.attr("x",r.posWithOffset-c.width/2),N.rotateCommitLabel)){if("TB"===U||"BT"===U)n.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),i.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{let t=-7.5-(c.width+10)/25*9.5,e=10+c.width/25*8.5;o.attr("transform","translate("+t+", "+e+") rotate(-45, "+a+", "+r.y+")")}}}},"drawCommitLabel"),tn=/* @__PURE__ */(0,m.__name)((t,e,r,a)=>{if(e.tags.length>0){let o=0,i=0,n=0,c=[];for(let a of e.tags.reverse()){let e=t.insert("polygon"),s=t.append("circle"),m=t.append("text").attr("y",r.y-16-o).attr("class","tag-label").text(a),l=m.node()?.getBBox();if(!l)throw Error("Tag bbox not found");i=Math.max(i,l.width),n=Math.max(n,l.height),m.attr("x",r.posWithOffset-l.width/2),c.push({tag:m,hole:s,rect:e,yOffset:o}),o+=20}for(let{tag:t,hole:e,rect:o,yOffset:s}of c){let c=n/2,m=r.y-19.2-s;if(o.attr("class","tag-label-bkg").attr("points",`
      ${a-i/2-2},${m+2}  
      ${a-i/2-2},${m-2}
      ${r.posWithOffset-i/2-4},${m-c-2}
      ${r.posWithOffset+i/2+4},${m-c-2}
      ${r.posWithOffset+i/2+4},${m+c+2}
      ${r.posWithOffset-i/2-4},${m+c+2}`),e.attr("cy",m).attr("cx",a-i/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===U||"BT"===U){let n=a+s;o.attr("class","tag-label-bkg").attr("points",`
        ${r.x},${n+2}
        ${r.x},${n-2}
        ${r.x+10},${n-c-2}
        ${r.x+10+i+4},${n-c-2}
        ${r.x+10+i+4},${n+c+2}
        ${r.x+10},${n+c+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),e.attr("cx",r.x+2).attr("cy",n).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),t.attr("x",r.x+5).attr("y",n+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+a+")")}}}},"drawCommitTags"),tc=/* @__PURE__ */(0,m.__name)(t=>{switch(t.customType??t.type){case l.NORMAL:return"commit-normal";case l.REVERSE:return"commit-reverse";case l.HIGHLIGHT:return"commit-highlight";case l.MERGE:return"commit-merge";case l.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),ts=/* @__PURE__ */(0,m.__name)((t,e,r,a)=>{let o={x:0,y:0};if(t.parents.length>0){let r=Q(t.parents);if(r){let i=a.get(r)??o;return"TB"===e?i.y+40:"BT"===e?(a.get(t.id)??o).y-40:i.x+40}}else{if("TB"===e)return 30;if("BT"===e)return(a.get(t.id)??o).y-40}return 0},"calculatePosition"),tm=/* @__PURE__ */(0,m.__name)((t,e,r)=>{let a="BT"===U&&r?e:e+10,o="TB"===U||"BT"===U?a:j.get(t.branch)?.pos,i="TB"===U||"BT"===U?j.get(t.branch)?.pos:a;if(void 0===i||void 0===o)throw Error(`Position were undefined for commit ${t.id}`);return{x:i,y:o,posWithOffset:a}},"getCommitPosition"),tl=/* @__PURE__ */(0,m.__name)((t,e,r)=>{if(!N)throw Error("GitGraph config not found");let a=t.append("g").attr("class","commit-bullets"),o=t.append("g").attr("class","commit-labels"),i="TB"===U||"BT"===U?30:0,n=[...e.keys()],c=N?.parallelCommits??!1,s=n.sort(/* @__PURE__ */(0,m.__name)((t,r)=>{let a=e.get(t)?.seq,o=e.get(r)?.seq;return void 0!==a&&void 0!==o?a-o:0},"sortKeys"));"BT"===U&&(c&&X(s,e,i),s=s.reverse()),s.forEach(t=>{let n=e.get(t);if(!n)throw Error(`Commit not found for key ${t}`);c&&(i=ts(n,U,i,W));let s=tm(n,i,c);if(r){let t=tc(n),e=n.customType??n.type,r=j.get(n.branch)?.index??0;to(a,n,s,t,r,e),ti(o,n,s,i),tn(o,n,s,i)}"TB"===U||"BT"===U?W.set(n.id,{x:s.x,y:s.posWithOffset}):W.set(n.id,{x:s.posWithOffset,y:s.y}),(i="BT"===U&&c?i+40:i+40+10)>K&&(K=i)})},"drawCommits"),td=/* @__PURE__ */(0,m.__name)((t,e,r,a,o)=>{let i=("TB"===U||"BT"===U?r.x<a.x:r.y<a.y)?e.branch:t.branch,n=/* @__PURE__ */(0,m.__name)(t=>t.branch===i,"isOnBranchToGetCurve"),c=/* @__PURE__ */(0,m.__name)(r=>r.seq>t.seq&&r.seq<e.seq,"isBetweenCommits");return[...o.values()].some(t=>c(t)&&n(t))},"shouldRerouteArrow"),th=/* @__PURE__ */(0,m.__name)((t,e,r=0)=>{let a=t+Math.abs(t-e)/2;if(r>5)return a;if(F.every(t=>Math.abs(t-a)>=10))return F.push(a),a;let o=Math.abs(t-e);return th(t,e-o/5,r+1)},"findLane"),t$=/* @__PURE__ */(0,m.__name)((t,e,r,a)=>{let o;let i=W.get(e.id),n=W.get(r.id);if(void 0===i||void 0===n)throw Error(`Commit positions not found for commits ${e.id} and ${r.id}`);let c=td(e,r,i,n,a),s="",m="",d=0,h=0,$=j.get(r.branch)?.index;if(r.type===l.MERGE&&e.id!==r.parents[0]&&($=j.get(e.branch)?.index),c){s="A 10 10, 0, 0, 0,",m="A 10 10, 0, 0, 1,",d=10,h=10;let t=i.y<n.y?th(i.y,n.y):th(n.y,i.y),r=i.x<n.x?th(i.x,n.x):th(n.x,i.x);"TB"===U?i.x<n.x?o=`M ${i.x} ${i.y} L ${r-d} ${i.y} ${m} ${r} ${i.y+h} L ${r} ${n.y-d} ${s} ${r+h} ${n.y} L ${n.x} ${n.y}`:($=j.get(e.branch)?.index,o=`M ${i.x} ${i.y} L ${r+d} ${i.y} ${s} ${r} ${i.y+h} L ${r} ${n.y-d} ${m} ${r-h} ${n.y} L ${n.x} ${n.y}`):"BT"===U?i.x<n.x?o=`M ${i.x} ${i.y} L ${r-d} ${i.y} ${s} ${r} ${i.y-h} L ${r} ${n.y+d} ${m} ${r+h} ${n.y} L ${n.x} ${n.y}`:($=j.get(e.branch)?.index,o=`M ${i.x} ${i.y} L ${r+d} ${i.y} ${m} ${r} ${i.y-h} L ${r} ${n.y+d} ${s} ${r-h} ${n.y} L ${n.x} ${n.y}`):i.y<n.y?o=`M ${i.x} ${i.y} L ${i.x} ${t-d} ${s} ${i.x+h} ${t} L ${n.x-d} ${t} ${m} ${n.x} ${t+h} L ${n.x} ${n.y}`:($=j.get(e.branch)?.index,o=`M ${i.x} ${i.y} L ${i.x} ${t+d} ${m} ${i.x+h} ${t} L ${n.x-d} ${t} ${s} ${n.x} ${t-h} L ${n.x} ${n.y}`)}else s="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",d=20,h=20,"TB"===U?(i.x<n.x&&(o=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${n.y-d} ${s} ${i.x+h} ${n.y} L ${n.x} ${n.y}`:`M ${i.x} ${i.y} L ${n.x-d} ${i.y} ${m} ${n.x} ${i.y+h} L ${n.x} ${n.y}`),i.x>n.x&&(s="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",d=20,h=20,o=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${n.y-d} ${m} ${i.x-h} ${n.y} L ${n.x} ${n.y}`:`M ${i.x} ${i.y} L ${n.x+d} ${i.y} ${s} ${n.x} ${i.y+h} L ${n.x} ${n.y}`),i.x===n.x&&(o=`M ${i.x} ${i.y} L ${n.x} ${n.y}`)):"BT"===U?(i.x<n.x&&(o=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${n.y+d} ${m} ${i.x+h} ${n.y} L ${n.x} ${n.y}`:`M ${i.x} ${i.y} L ${n.x-d} ${i.y} ${s} ${n.x} ${i.y-h} L ${n.x} ${n.y}`),i.x>n.x&&(s="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",d=20,h=20,o=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${n.y+d} ${s} ${i.x-h} ${n.y} L ${n.x} ${n.y}`:`M ${i.x} ${i.y} L ${n.x-d} ${i.y} ${s} ${n.x} ${i.y-h} L ${n.x} ${n.y}`),i.x===n.x&&(o=`M ${i.x} ${i.y} L ${n.x} ${n.y}`)):(i.y<n.y&&(o=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${n.x-d} ${i.y} ${m} ${n.x} ${i.y+h} L ${n.x} ${n.y}`:`M ${i.x} ${i.y} L ${i.x} ${n.y-d} ${s} ${i.x+h} ${n.y} L ${n.x} ${n.y}`),i.y>n.y&&(o=r.type===l.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${n.x-d} ${i.y} ${s} ${n.x} ${i.y-h} L ${n.x} ${n.y}`:`M ${i.x} ${i.y} L ${i.x} ${n.y+d} ${m} ${i.x+h} ${n.y} L ${n.x} ${n.y}`),i.y===n.y&&(o=`M ${i.x} ${i.y} L ${n.x} ${n.y}`));if(void 0===o)throw Error("Line definition not found");t.append("path").attr("d",o).attr("class","arrow arrow"+$%8)},"drawArrow"),tg=/* @__PURE__ */(0,m.__name)((t,e)=>{let r=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach(t=>{let a=e.get(t);a.parents&&a.parents.length>0&&a.parents.forEach(t=>{t$(r,e.get(t),a,e)})})},"drawArrows"),ty=/* @__PURE__ */(0,m.__name)((t,e)=>{let r=t.append("g");e.forEach((t,e)=>{let a=e%8,o=j.get(t.name)?.pos;if(void 0===o)throw Error(`Position not found for branch ${t.name}`);let i=r.append("line");i.attr("x1",0),i.attr("y1",o),i.attr("x2",K),i.attr("y2",o),i.attr("class","branch branch"+a),"TB"===U?(i.attr("y1",30),i.attr("x1",o),i.attr("y2",K),i.attr("x2",o)):"BT"===U&&(i.attr("y1",K),i.attr("x1",o),i.attr("y2",30),i.attr("x2",o)),F.push(o);let n=J(t.name),c=r.insert("rect"),s=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);s.node().appendChild(n);let m=n.getBBox();c.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-m.width-4-(N?.rotateCommitLabel===!0?30:0)).attr("y",-m.height/2+8).attr("width",m.width+18).attr("height",m.height+4),s.attr("transform","translate("+(-m.width-14-(N?.rotateCommitLabel===!0?30:0))+", "+(o-m.height/2-1)+")"),"TB"===U?(c.attr("x",o-m.width/2-10).attr("y",0),s.attr("transform","translate("+(o-m.width/2-5)+", 0)")):"BT"===U?(c.attr("x",o-m.width/2-10).attr("y",K),s.attr("transform","translate("+(o-m.width/2-5)+", "+K+")")):c.attr("transform","translate(-19, "+(o-m.height/2)+")")})},"drawBranches"),tp=/* @__PURE__ */(0,m.__name)(function(t,e,r,a,o){return j.set(t,{pos:e,index:r}),e+=50+(o?40:0)+("TB"===U||"BT"===U?a.width/2:0)},"setBranchPosition"),tf={parser:H,db:R,renderer:{draw:/* @__PURE__ */(0,m.__name)(function(t,e,r,a){if(V(),(0,s.log).debug("in gitgraph renderer",t+"\n","id:",e,r),!N)throw Error("GitGraph config not found");let o=N.rotateCommitLabel??!1,i=a.db;Y=i.getCommits();let n=i.getBranchesAsObjArray();U=i.getDirection();let m=(0,s.select_default)(`[id="${e}"]`),l=0;n.forEach((t,e)=>{let r=J(t.name),a=m.append("g"),i=a.insert("g").attr("class","branchLabel"),n=i.insert("g").attr("class","label branch-label");n.node()?.appendChild(r);let c=r.getBBox();l=tp(t.name,l,e,c,o),n.remove(),i.remove(),a.remove()}),tl(m,Y,!1),N.showBranches&&ty(m,n),tg(m,Y),tl(m,Y,!0),(0,c.utils_default).insertTitle(m,"gitTitleText",N.titleTopMargin??0,i.getDiagramTitle()),(0,s.setupGraphViewbox2)(void 0,m,N.diagramPadding,N.useMaxWidth)},"draw")},styles:/* @__PURE__ */(0,m.__name)(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(e=>`
        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }
        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }
        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }
        .label${e}  { fill: ${t["git"+e]}; }
        .arrow${e} { stroke: ${t["git"+e]}; }
        `).join("\n")}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles")}}),r("inIYd",function(r,a){t(r.exports,"ImperativeState",()=>i);var o=e("7xxrv"),i=class{constructor(t){this.init=t,this.records=this.init()}static{(0,o.__name)(this,"ImperativeState")}reset(){this.records=this.init()}}}),r("eIvOz",function(r,a){function o(t,e){t.accDescr&&e.setAccDescription?.(t.accDescr),t.accTitle&&e.setAccTitle?.(t.accTitle),t.title&&e.setDiagramTitle?.(t.title)}t(r.exports,"populateCommonDb",()=>o),(0,e("7xxrv").__name)(o,"populateCommonDb")});
//# sourceMappingURL=gitGraphDiagram-GAN24H3L.0089a751.js.map
