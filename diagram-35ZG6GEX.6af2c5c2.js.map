{"mappings":"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","sources":["<anon>","node_modules/mermaid/dist/chunks/mermaid.esm/diagram-35ZG6GEX.mjs","node_modules/mermaid/dist/chunks/mermaid.esm/chunk-K2ZEYYM2.mjs"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"cUb6i\", function(module, exports) {\n\n$parcel$export(module.exports, \"diagram\", () => $b41a52c0a414304b$export$6118d022d940d562);\n\nvar $eIvOz = parcelRequire(\"eIvOz\");\n\nvar $9nJgw = parcelRequire(\"9nJgw\");\nparcelRequire(\"2P6uP\");\nparcelRequire(\"58fUp\");\nparcelRequire(\"6JCZZ\");\n\nvar $78zRz = parcelRequire(\"78zRz\");\n\nvar $fo0kP = parcelRequire(\"fo0kP\");\nparcelRequire(\"1OUid\");\n\nvar $7hgA6 = parcelRequire(\"7hgA6\");\nparcelRequire(\"5aabO\");\nparcelRequire(\"bqRip\");\nparcelRequire(\"bYG2S\");\nparcelRequire(\"76RTQ\");\nparcelRequire(\"f34bP\");\nparcelRequire(\"2266r\");\n\nvar $7xxrv = parcelRequire(\"7xxrv\");\n// src/diagrams/packet/db.ts\nvar $b41a52c0a414304b$var$defaultPacketData = {\n    packet: []\n};\nvar $b41a52c0a414304b$var$data = structuredClone($b41a52c0a414304b$var$defaultPacketData);\nvar $b41a52c0a414304b$var$DEFAULT_PACKET_CONFIG = (0, $7hgA6.defaultConfig_default).packet;\nvar $b41a52c0a414304b$var$getConfig2 = /* @__PURE__ */ (0, $7xxrv.__name)(()=>{\n    const config = (0, $fo0kP.cleanAndMerge)({\n        ...$b41a52c0a414304b$var$DEFAULT_PACKET_CONFIG,\n        ...(0, $7hgA6.getConfig)().packet\n    });\n    if (config.showBits) config.paddingY += 10;\n    return config;\n}, \"getConfig\");\nvar $b41a52c0a414304b$var$getPacket = /* @__PURE__ */ (0, $7xxrv.__name)(()=>$b41a52c0a414304b$var$data.packet, \"getPacket\");\nvar $b41a52c0a414304b$var$pushWord = /* @__PURE__ */ (0, $7xxrv.__name)((word)=>{\n    if (word.length > 0) $b41a52c0a414304b$var$data.packet.push(word);\n}, \"pushWord\");\nvar $b41a52c0a414304b$var$clear2 = /* @__PURE__ */ (0, $7xxrv.__name)(()=>{\n    (0, $7hgA6.clear)();\n    $b41a52c0a414304b$var$data = structuredClone($b41a52c0a414304b$var$defaultPacketData);\n}, \"clear\");\nvar $b41a52c0a414304b$var$db = {\n    pushWord: $b41a52c0a414304b$var$pushWord,\n    getPacket: $b41a52c0a414304b$var$getPacket,\n    getConfig: $b41a52c0a414304b$var$getConfig2,\n    clear: $b41a52c0a414304b$var$clear2,\n    setAccTitle: $7hgA6.setAccTitle,\n    getAccTitle: $7hgA6.getAccTitle,\n    setDiagramTitle: $7hgA6.setDiagramTitle,\n    getDiagramTitle: $7hgA6.getDiagramTitle,\n    getAccDescription: $7hgA6.getAccDescription,\n    setAccDescription: $7hgA6.setAccDescription\n};\n// src/diagrams/packet/parser.ts\nvar $b41a52c0a414304b$var$maxPacketSize = 1e4;\nvar $b41a52c0a414304b$var$populate = /* @__PURE__ */ (0, $7xxrv.__name)((ast)=>{\n    (0, $eIvOz.populateCommonDb)(ast, $b41a52c0a414304b$var$db);\n    let lastByte = -1;\n    let word = [];\n    let row = 1;\n    const { bitsPerRow: bitsPerRow } = $b41a52c0a414304b$var$db.getConfig();\n    for (let { start: start, end: end, label: label } of ast.blocks){\n        if (end && end < start) throw new Error(`Packet block ${start} - ${end} is invalid. End must be greater than start.`);\n        if (start !== lastByte + 1) throw new Error(`Packet block ${start} - ${end ?? start} is not contiguous. It should start from ${lastByte + 1}.`);\n        lastByte = end ?? start;\n        (0, $7hgA6.log).debug(`Packet block ${start} - ${lastByte} with label ${label}`);\n        while(word.length <= bitsPerRow + 1 && $b41a52c0a414304b$var$db.getPacket().length < $b41a52c0a414304b$var$maxPacketSize){\n            const [block, nextBlock] = $b41a52c0a414304b$var$getNextFittingBlock({\n                start: start,\n                end: end,\n                label: label\n            }, row, bitsPerRow);\n            word.push(block);\n            if (block.end + 1 === row * bitsPerRow) {\n                $b41a52c0a414304b$var$db.pushWord(word);\n                word = [];\n                row++;\n            }\n            if (!nextBlock) break;\n            ({ start: start, end: end, label: label } = nextBlock);\n        }\n    }\n    $b41a52c0a414304b$var$db.pushWord(word);\n}, \"populate\");\nvar $b41a52c0a414304b$var$getNextFittingBlock = /* @__PURE__ */ (0, $7xxrv.__name)((block, row, bitsPerRow)=>{\n    if (block.end === void 0) block.end = block.start;\n    if (block.start > block.end) throw new Error(`Block start ${block.start} is greater than block end ${block.end}.`);\n    if (block.end + 1 <= row * bitsPerRow) return [\n        block,\n        void 0\n    ];\n    return [\n        {\n            start: block.start,\n            end: row * bitsPerRow - 1,\n            label: block.label\n        },\n        {\n            start: row * bitsPerRow,\n            end: block.end,\n            label: block.label\n        }\n    ];\n}, \"getNextFittingBlock\");\nvar $b41a52c0a414304b$var$parser = {\n    parse: /* @__PURE__ */ (0, $7xxrv.__name)(async (input)=>{\n        const ast = await (0, $9nJgw.parse)(\"packet\", input);\n        (0, $7hgA6.log).debug(ast);\n        $b41a52c0a414304b$var$populate(ast);\n    }, \"parse\")\n};\n// src/diagrams/packet/renderer.ts\nvar $b41a52c0a414304b$var$draw = /* @__PURE__ */ (0, $7xxrv.__name)((_text, id, _version, diagram2)=>{\n    const db2 = diagram2.db;\n    const config = db2.getConfig();\n    const { rowHeight: rowHeight, paddingY: paddingY, bitWidth: bitWidth, bitsPerRow: bitsPerRow } = config;\n    const words = db2.getPacket();\n    const title = db2.getDiagramTitle();\n    const totalRowHeight = rowHeight + paddingY;\n    const svgHeight = totalRowHeight * (words.length + 1) - (title ? 0 : rowHeight);\n    const svgWidth = bitWidth * bitsPerRow + 2;\n    const svg = (0, $78zRz.selectSvgElement)(id);\n    svg.attr(\"viewbox\", `0 0 ${svgWidth} ${svgHeight}`);\n    (0, $7hgA6.configureSvgSize)(svg, svgHeight, svgWidth, config.useMaxWidth);\n    for (const [word, packet] of words.entries())$b41a52c0a414304b$var$drawWord(svg, packet, word, config);\n    svg.append(\"text\").text(title).attr(\"x\", svgWidth / 2).attr(\"y\", svgHeight - totalRowHeight / 2).attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").attr(\"class\", \"packetTitle\");\n}, \"draw\");\nvar $b41a52c0a414304b$var$drawWord = /* @__PURE__ */ (0, $7xxrv.__name)((svg, word, rowNumber, { rowHeight: rowHeight, paddingX: paddingX, paddingY: paddingY, bitWidth: bitWidth, bitsPerRow: bitsPerRow, showBits: showBits })=>{\n    const group = svg.append(\"g\");\n    const wordY = rowNumber * (rowHeight + paddingY) + paddingY;\n    for (const block of word){\n        const blockX = block.start % bitsPerRow * bitWidth + 1;\n        const width = (block.end - block.start + 1) * bitWidth - paddingX;\n        group.append(\"rect\").attr(\"x\", blockX).attr(\"y\", wordY).attr(\"width\", width).attr(\"height\", rowHeight).attr(\"class\", \"packetBlock\");\n        group.append(\"text\").attr(\"x\", blockX + width / 2).attr(\"y\", wordY + rowHeight / 2).attr(\"class\", \"packetLabel\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").text(block.label);\n        if (!showBits) continue;\n        const isSingleBlock = block.end === block.start;\n        const bitNumberY = wordY - 2;\n        group.append(\"text\").attr(\"x\", blockX + (isSingleBlock ? width / 2 : 0)).attr(\"y\", bitNumberY).attr(\"class\", \"packetByte start\").attr(\"dominant-baseline\", \"auto\").attr(\"text-anchor\", isSingleBlock ? \"middle\" : \"start\").text(block.start);\n        if (!isSingleBlock) group.append(\"text\").attr(\"x\", blockX + width).attr(\"y\", bitNumberY).attr(\"class\", \"packetByte end\").attr(\"dominant-baseline\", \"auto\").attr(\"text-anchor\", \"end\").text(block.end);\n    }\n}, \"drawWord\");\nvar $b41a52c0a414304b$var$renderer = {\n    draw: $b41a52c0a414304b$var$draw\n};\n// src/diagrams/packet/styles.ts\nvar $b41a52c0a414304b$var$defaultPacketStyleOptions = {\n    byteFontSize: \"10px\",\n    startByteColor: \"black\",\n    endByteColor: \"black\",\n    labelColor: \"black\",\n    labelFontSize: \"12px\",\n    titleColor: \"black\",\n    titleFontSize: \"14px\",\n    blockStrokeColor: \"black\",\n    blockStrokeWidth: \"1\",\n    blockFillColor: \"#efefef\"\n};\nvar $b41a52c0a414304b$var$styles = /* @__PURE__ */ (0, $7xxrv.__name)(({ packet: packet } = {})=>{\n    const options = (0, $fo0kP.cleanAndMerge)($b41a52c0a414304b$var$defaultPacketStyleOptions, packet);\n    return `\n\t.packetByte {\n\t\tfont-size: ${options.byteFontSize};\n\t}\n\t.packetByte.start {\n\t\tfill: ${options.startByteColor};\n\t}\n\t.packetByte.end {\n\t\tfill: ${options.endByteColor};\n\t}\n\t.packetLabel {\n\t\tfill: ${options.labelColor};\n\t\tfont-size: ${options.labelFontSize};\n\t}\n\t.packetTitle {\n\t\tfill: ${options.titleColor};\n\t\tfont-size: ${options.titleFontSize};\n\t}\n\t.packetBlock {\n\t\tstroke: ${options.blockStrokeColor};\n\t\tstroke-width: ${options.blockStrokeWidth};\n\t\tfill: ${options.blockFillColor};\n\t}\n\t`;\n}, \"styles\");\n// src/diagrams/packet/diagram.ts\nvar $b41a52c0a414304b$export$6118d022d940d562 = {\n    parser: $b41a52c0a414304b$var$parser,\n    db: $b41a52c0a414304b$var$db,\n    renderer: $b41a52c0a414304b$var$renderer,\n    styles: $b41a52c0a414304b$var$styles\n};\n\n});\nparcelRegister(\"eIvOz\", function(module, exports) {\n\n$parcel$export(module.exports, \"populateCommonDb\", () => $81f57dd5a6cf2155$export$ca039920720611c5);\n\nvar $7xxrv = parcelRequire(\"7xxrv\");\n// src/diagrams/common/populateCommonDb.ts\nfunction $81f57dd5a6cf2155$export$ca039920720611c5(ast, db) {\n    if (ast.accDescr) db.setAccDescription?.(ast.accDescr);\n    if (ast.accTitle) db.setAccTitle?.(ast.accTitle);\n    if (ast.title) db.setDiagramTitle?.(ast.title);\n}\n(0, $7xxrv.__name)($81f57dd5a6cf2155$export$ca039920720611c5, \"populateCommonDb\");\n\n});\n\n\n\n//# sourceMappingURL=diagram-35ZG6GEX.6af2c5c2.js.map\n","import {\n  populateCommonDb\n} from \"./chunk-K2ZEYYM2.mjs\";\nimport {\n  parse\n} from \"./chunk-ZTYE4VVB.mjs\";\nimport \"./chunk-VUYTGWVG.mjs\";\nimport \"./chunk-FKTRZSYK.mjs\";\nimport \"./chunk-55U4IUQG.mjs\";\nimport {\n  selectSvgElement\n} from \"./chunk-XB7NGBBB.mjs\";\nimport {\n  cleanAndMerge\n} from \"./chunk-TVJ2DRIE.mjs\";\nimport \"./chunk-GKOISANM.mjs\";\nimport {\n  clear,\n  configureSvgSize,\n  defaultConfig_default,\n  getAccDescription,\n  getAccTitle,\n  getConfig,\n  getDiagramTitle,\n  log,\n  setAccDescription,\n  setAccTitle,\n  setDiagramTitle\n} from \"./chunk-M7TDSP4I.mjs\";\nimport \"./chunk-5PULXXUT.mjs\";\nimport \"./chunk-ACX3ZYE2.mjs\";\nimport \"./chunk-46UCTVYF.mjs\";\nimport \"./chunk-TGZYFRKZ.mjs\";\nimport \"./chunk-GRZAG2UZ.mjs\";\nimport \"./chunk-HD3LK5B5.mjs\";\nimport {\n  __name\n} from \"./chunk-DLQEHMXD.mjs\";\n\n// src/diagrams/packet/db.ts\nvar defaultPacketData = {\n  packet: []\n};\nvar data = structuredClone(defaultPacketData);\nvar DEFAULT_PACKET_CONFIG = defaultConfig_default.packet;\nvar getConfig2 = /* @__PURE__ */ __name(() => {\n  const config = cleanAndMerge({\n    ...DEFAULT_PACKET_CONFIG,\n    ...getConfig().packet\n  });\n  if (config.showBits) {\n    config.paddingY += 10;\n  }\n  return config;\n}, \"getConfig\");\nvar getPacket = /* @__PURE__ */ __name(() => data.packet, \"getPacket\");\nvar pushWord = /* @__PURE__ */ __name((word) => {\n  if (word.length > 0) {\n    data.packet.push(word);\n  }\n}, \"pushWord\");\nvar clear2 = /* @__PURE__ */ __name(() => {\n  clear();\n  data = structuredClone(defaultPacketData);\n}, \"clear\");\nvar db = {\n  pushWord,\n  getPacket,\n  getConfig: getConfig2,\n  clear: clear2,\n  setAccTitle,\n  getAccTitle,\n  setDiagramTitle,\n  getDiagramTitle,\n  getAccDescription,\n  setAccDescription\n};\n\n// src/diagrams/packet/parser.ts\nvar maxPacketSize = 1e4;\nvar populate = /* @__PURE__ */ __name((ast) => {\n  populateCommonDb(ast, db);\n  let lastByte = -1;\n  let word = [];\n  let row = 1;\n  const { bitsPerRow } = db.getConfig();\n  for (let { start, end, label } of ast.blocks) {\n    if (end && end < start) {\n      throw new Error(`Packet block ${start} - ${end} is invalid. End must be greater than start.`);\n    }\n    if (start !== lastByte + 1) {\n      throw new Error(\n        `Packet block ${start} - ${end ?? start} is not contiguous. It should start from ${lastByte + 1}.`\n      );\n    }\n    lastByte = end ?? start;\n    log.debug(`Packet block ${start} - ${lastByte} with label ${label}`);\n    while (word.length <= bitsPerRow + 1 && db.getPacket().length < maxPacketSize) {\n      const [block, nextBlock] = getNextFittingBlock({ start, end, label }, row, bitsPerRow);\n      word.push(block);\n      if (block.end + 1 === row * bitsPerRow) {\n        db.pushWord(word);\n        word = [];\n        row++;\n      }\n      if (!nextBlock) {\n        break;\n      }\n      ({ start, end, label } = nextBlock);\n    }\n  }\n  db.pushWord(word);\n}, \"populate\");\nvar getNextFittingBlock = /* @__PURE__ */ __name((block, row, bitsPerRow) => {\n  if (block.end === void 0) {\n    block.end = block.start;\n  }\n  if (block.start > block.end) {\n    throw new Error(`Block start ${block.start} is greater than block end ${block.end}.`);\n  }\n  if (block.end + 1 <= row * bitsPerRow) {\n    return [block, void 0];\n  }\n  return [\n    {\n      start: block.start,\n      end: row * bitsPerRow - 1,\n      label: block.label\n    },\n    {\n      start: row * bitsPerRow,\n      end: block.end,\n      label: block.label\n    }\n  ];\n}, \"getNextFittingBlock\");\nvar parser = {\n  parse: /* @__PURE__ */ __name(async (input) => {\n    const ast = await parse(\"packet\", input);\n    log.debug(ast);\n    populate(ast);\n  }, \"parse\")\n};\n\n// src/diagrams/packet/renderer.ts\nvar draw = /* @__PURE__ */ __name((_text, id, _version, diagram2) => {\n  const db2 = diagram2.db;\n  const config = db2.getConfig();\n  const { rowHeight, paddingY, bitWidth, bitsPerRow } = config;\n  const words = db2.getPacket();\n  const title = db2.getDiagramTitle();\n  const totalRowHeight = rowHeight + paddingY;\n  const svgHeight = totalRowHeight * (words.length + 1) - (title ? 0 : rowHeight);\n  const svgWidth = bitWidth * bitsPerRow + 2;\n  const svg = selectSvgElement(id);\n  svg.attr(\"viewbox\", `0 0 ${svgWidth} ${svgHeight}`);\n  configureSvgSize(svg, svgHeight, svgWidth, config.useMaxWidth);\n  for (const [word, packet] of words.entries()) {\n    drawWord(svg, packet, word, config);\n  }\n  svg.append(\"text\").text(title).attr(\"x\", svgWidth / 2).attr(\"y\", svgHeight - totalRowHeight / 2).attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").attr(\"class\", \"packetTitle\");\n}, \"draw\");\nvar drawWord = /* @__PURE__ */ __name((svg, word, rowNumber, { rowHeight, paddingX, paddingY, bitWidth, bitsPerRow, showBits }) => {\n  const group = svg.append(\"g\");\n  const wordY = rowNumber * (rowHeight + paddingY) + paddingY;\n  for (const block of word) {\n    const blockX = block.start % bitsPerRow * bitWidth + 1;\n    const width = (block.end - block.start + 1) * bitWidth - paddingX;\n    group.append(\"rect\").attr(\"x\", blockX).attr(\"y\", wordY).attr(\"width\", width).attr(\"height\", rowHeight).attr(\"class\", \"packetBlock\");\n    group.append(\"text\").attr(\"x\", blockX + width / 2).attr(\"y\", wordY + rowHeight / 2).attr(\"class\", \"packetLabel\").attr(\"dominant-baseline\", \"middle\").attr(\"text-anchor\", \"middle\").text(block.label);\n    if (!showBits) {\n      continue;\n    }\n    const isSingleBlock = block.end === block.start;\n    const bitNumberY = wordY - 2;\n    group.append(\"text\").attr(\"x\", blockX + (isSingleBlock ? width / 2 : 0)).attr(\"y\", bitNumberY).attr(\"class\", \"packetByte start\").attr(\"dominant-baseline\", \"auto\").attr(\"text-anchor\", isSingleBlock ? \"middle\" : \"start\").text(block.start);\n    if (!isSingleBlock) {\n      group.append(\"text\").attr(\"x\", blockX + width).attr(\"y\", bitNumberY).attr(\"class\", \"packetByte end\").attr(\"dominant-baseline\", \"auto\").attr(\"text-anchor\", \"end\").text(block.end);\n    }\n  }\n}, \"drawWord\");\nvar renderer = { draw };\n\n// src/diagrams/packet/styles.ts\nvar defaultPacketStyleOptions = {\n  byteFontSize: \"10px\",\n  startByteColor: \"black\",\n  endByteColor: \"black\",\n  labelColor: \"black\",\n  labelFontSize: \"12px\",\n  titleColor: \"black\",\n  titleFontSize: \"14px\",\n  blockStrokeColor: \"black\",\n  blockStrokeWidth: \"1\",\n  blockFillColor: \"#efefef\"\n};\nvar styles = /* @__PURE__ */ __name(({ packet } = {}) => {\n  const options = cleanAndMerge(defaultPacketStyleOptions, packet);\n  return `\n\t.packetByte {\n\t\tfont-size: ${options.byteFontSize};\n\t}\n\t.packetByte.start {\n\t\tfill: ${options.startByteColor};\n\t}\n\t.packetByte.end {\n\t\tfill: ${options.endByteColor};\n\t}\n\t.packetLabel {\n\t\tfill: ${options.labelColor};\n\t\tfont-size: ${options.labelFontSize};\n\t}\n\t.packetTitle {\n\t\tfill: ${options.titleColor};\n\t\tfont-size: ${options.titleFontSize};\n\t}\n\t.packetBlock {\n\t\tstroke: ${options.blockStrokeColor};\n\t\tstroke-width: ${options.blockStrokeWidth};\n\t\tfill: ${options.blockFillColor};\n\t}\n\t`;\n}, \"styles\");\n\n// src/diagrams/packet/diagram.ts\nvar diagram = {\n  parser,\n  db,\n  renderer,\n  styles\n};\nexport {\n  diagram\n};\n","import {\n  __name\n} from \"./chunk-DLQEHMXD.mjs\";\n\n// src/diagrams/common/populateCommonDb.ts\nfunction populateCommonDb(ast, db) {\n  if (ast.accDescr) {\n    db.setAccDescription?.(ast.accDescr);\n  }\n  if (ast.accTitle) {\n    db.setAccTitle?.(ast.accTitle);\n  }\n  if (ast.title) {\n    db.setDiagramTitle?.(ast.title);\n  }\n}\n__name(populateCommonDb, \"populateCommonDb\");\n\nexport {\n  populateCommonDb\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$b41a52c0a414304b$export$6118d022d940d562","$eIvOz","$9nJgw","$78zRz","$fo0kP","$7hgA6","$7xxrv","$b41a52c0a414304b$var$defaultPacketData","packet","$b41a52c0a414304b$var$data","structuredClone","$b41a52c0a414304b$var$DEFAULT_PACKET_CONFIG","defaultConfig_default","$b41a52c0a414304b$var$getConfig2","__name","config","cleanAndMerge","getConfig","showBits","paddingY","$b41a52c0a414304b$var$getPacket","$b41a52c0a414304b$var$db","pushWord","word","length","push","getPacket","clear","setAccTitle","getAccTitle","setDiagramTitle","getDiagramTitle","getAccDescription","setAccDescription","$b41a52c0a414304b$var$populate","ast","populateCommonDb","lastByte","row","bitsPerRow","start","end","label","blocks","Error","log","debug","block","nextBlock","$b41a52c0a414304b$var$getNextFittingBlock","$b41a52c0a414304b$var$parser","parse","input","$b41a52c0a414304b$var$draw","_text","id","_version","diagram2","db2","db","rowHeight","bitWidth","words","title","totalRowHeight","svgHeight","svgWidth","svg","selectSvgElement","attr","configureSvgSize","useMaxWidth","entries","$b41a52c0a414304b$var$drawWord","append","text","rowNumber","paddingX","group","wordY","blockX","width","isSingleBlock","bitNumberY","$b41a52c0a414304b$var$defaultPacketStyleOptions","byteFontSize","startByteColor","endByteColor","labelColor","labelFontSize","titleColor","titleFontSize","blockStrokeColor","blockStrokeWidth","blockFillColor","parser","renderer","draw","styles","options","$81f57dd5a6cf2155$export$ca039920720611c5","accDescr","accTitle"],"version":3,"file":"diagram-35ZG6GEX.6af2c5c2.js.map"}